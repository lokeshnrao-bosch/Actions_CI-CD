name: Deploy eCommerce App

# Triggers for the workflow
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allows manual triggering

# Environment variables (none needed for static site)

jobs:
  # Job 1: Test and Validate
  test:
    runs-on: ubuntu-latest
    name: Test and Validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate HTML files
        run: |
          echo "Validating HTML files..."
          # Check HTML files exist and are not empty
          for file in *.html; do
            if [ -f "$file" ] && [ -s "$file" ]; then
              echo "‚úì $file is valid and not empty"
            else
              echo "‚ùå $file is missing or empty"
              exit 1
            fi
          done

      - name: Validate CSS files
        run: |
          echo "Validating CSS files..."
          # Check CSS files exist and basic syntax
          find assets/css -name "*.css" | while read file; do
            if [ -f "$file" ] && [ -s "$file" ]; then
              echo "‚úì $file exists and is not empty"
              # Basic CSS syntax check
              if grep -q "{" "$file" && grep -q "}" "$file"; then
                echo "‚úì $file has basic CSS syntax"
              else
                echo "‚ö†Ô∏è $file may have syntax issues"
              fi
            else
              echo "‚ùå $file is missing or empty"
              exit 1
            fi
          done

      - name: Validate JavaScript files
        run: |
          echo "Validating JavaScript files..."
          # Check JS files exist and basic structure
          find assets/js -name "*.js" | while read file; do
            if [ -f "$file" ] && [ -s "$file" ]; then
              echo "‚úì $file exists and is not empty"
              # Basic JS structure check
              if grep -q "function\|const\|let\|var" "$file"; then
                echo "‚úì $file contains JavaScript code"
              else
                echo "‚ö†Ô∏è $file may not contain valid JavaScript"
              fi
            else
              echo "‚ùå $file is missing or empty"
              exit 1
            fi
          done

      - name: Test application structure
        run: |
          echo "Testing application structure..."
          test -f index.html && echo "‚úì index.html exists"
          test -f products.html && echo "‚úì products.html exists"
          test -f cart.html && echo "‚úì cart.html exists"
          test -f product-detail.html && echo "‚úì product-detail.html exists"
          test -d assets/css && echo "‚úì CSS directory exists"
          test -d assets/js && echo "‚úì JavaScript directory exists"
          test -f data/products.json && echo "‚úì Products data exists"
          echo "Application structure validation completed"

  # Job 2: Build and Deploy to GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to GitHub Pages
    needs: test # Only run after tests pass
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write

    # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
    concurrency:
      group: "pages"
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Create deployment package
        run: |
          echo "Preparing deployment package..."
          # Ensure all files are ready for deployment
          ls -la
          echo "Files prepared for GitHub Pages deployment"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "."

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 3: Performance and Security Checks
  security:
    runs-on: ubuntu-latest
    name: Security and Performance Checks
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "Running security scan..."
          # Check for common security issues
          echo "Scanning for sensitive data..."
          if grep -r "password\|secret\|key" --exclude-dir=.git . || true; then
            echo "‚ö†Ô∏è  Potential sensitive data found - please review"
          else
            echo "‚úì No obvious sensitive data found"
          fi

      - name: Check file sizes
        run: |
          echo "Checking file sizes for performance..."
          find . -name "*.js" -o -name "*.css" -o -name "*.html" | while read file; do
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
            if [ "$size" -gt 100000 ]; then
              echo "‚ö†Ô∏è  Large file detected: $file (${size} bytes)"
            else
              echo "‚úì $file (${size} bytes)"
            fi
          done

      - name: Validate JSON files
        run: |
          echo "Validating JSON files..."
          find . -name "*.json" | while read file; do
            if python3 -m json.tool "$file" > /dev/null; then
              echo "‚úì Valid JSON: $file"
            else
              echo "‚ùå Invalid JSON: $file"
              exit 1
            fi
          done

  # Job 4: Notification
  notify:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [test, deploy, security]
    if: always()

    steps:
      - name: Deployment Status
        run: |
          echo "=== Deployment Summary ==="
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.event_name }}"
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
            echo "üöÄ Your eCommerce app should be available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          else
            echo "‚ùå Deployment failed. Check the logs above."
          fi
